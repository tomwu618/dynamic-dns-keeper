# Workflow name
name: Go CI & Release for dynamic-dns-keeper

# Events that trigger the workflow
on:
  push:
    branches:
      - 'main' # Trigger on push to the main branch
    tags:
      - 'v*'   # Trigger on push of tags like v*
  pull_request:
    branches:
      - 'main' # Trigger on Pull Request to the main branch

# Define one or more jobs
jobs:
  build-test-and-release:
    # Job display name, changes dynamically based on the matrix
    name: Build (${{ matrix.target.os }}/${{ matrix.target.arch }})
    # The environment the job will run on
    runs-on: ubuntu-latest

    # Grant permissions to GITHUB_TOKEN for this job to create a release
    permissions:
      contents: write  # Allows creating releases, tags, and uploading assets

    # Define the build matrix
    strategy:
      matrix:
        target:
          - { os: darwin, arch: amd64, name_suffix: darwin_amd64 }
          - { os: darwin, arch: arm64, name_suffix: darwin_arm64 }
          - { os: linux, arch: amd64, name_suffix: linux_amd64 }
          - { os: linux, arch: arm64, name_suffix: linux_arm64 }
        go_version: [ '1.25' ] # Ensure this is the Go version you want for your project

    # Steps to execute for the job
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go_version }}
          cache-dependency-path: go.sum

      # Step 3: Tidy module dependencies
      - name: Tidy modules
        run: go mod tidy

      # Step 4: Run tests (if you have test files)
      - name: Run tests
        run: go test -v ./...

      # Step 5: Dynamically set output filenames and archive type
      - name: Set output names and archive type
        id: set_names
        shell: bash
        run: |
          BINARY_BASE_NAME="dynamic-dns-keeper"
          BINARY_NAME="${BINARY_BASE_NAME}${{ matrix.target.ext }}"
          
          if [ "${{ matrix.target.os }}" == "windows" ]; then
            ARCHIVE_NAME="${BINARY_BASE_NAME}_${{ matrix.target.name_suffix }}.zip"
          else
            ARCHIVE_NAME="${BINARY_BASE_NAME}_${{ matrix.target.name_suffix }}.tar.gz"
          fi
          
          echo "binary_name=${BINARY_NAME}" >> $GITHUB_OUTPUT
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      # Step 6: Cross-compile the application
      - name: Compile for ${{ matrix.target.os }}/${{ matrix.target.arch }}
        env:
          GOOS: ${{ matrix.target.os }}
          GOARCH: ${{ matrix.target.arch }}
        run: go build -v -o ${{ steps.set_names.outputs.binary_name }} -ldflags="-s -w" .

      # Step 7: Archive the binary, LICENSE, and README
      # IMPORTANT: Ensure you have LICENSE and README.md files in your repository root
      - name: Archive release files
        shell: bash
        run: |
          if [ "${{ matrix.target.os }}" == "windows" ]; then
            zip -r ${{ steps.set_names.outputs.archive_name }} ${{ steps.set_names.outputs.binary_name }} LICENSE README.md
          else
            tar -czvf ${{ steps.set_names.outputs.archive_name }} ${{ steps.set_names.outputs.binary_name }} LICENSE README.md
          fi
          ls -l # Debug step: list the generated archive file

      # Step 8: Upload build artifact on pushes to the main branch
      - name: Upload Build Artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact displayed on the GitHub UI
          name: ${{ steps.set_names.outputs.binary_name }}-${{ matrix.target.name_suffix }}
          # The archive file to upload
          path: ${{ steps.set_names.outputs.archive_name }}
          retention-days: 7

      # Step 9: Create GitHub Release and upload asset on tag push
      - name: Create Release and Upload Asset
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.set_names.outputs.archive_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}